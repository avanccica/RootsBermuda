import React, { useState, useEffect, useCallback, useRef } from 'react';

// --- MOCK DATA SIMULATION ---
// In a real application, this data would be fetched from your backend API.
const useMockData = () => {
  const mockBlogs = [
    { id: 1, title: 'Summer Garden Planning', snippet: 'A quick guide to starting your first summer garden.', date: '2024-09-15', hashtags: ['#gardening', '#diy', '#home'] },
    { id: 2, title: 'React Hooks Deep Dive', snippet: 'Understanding useState and useEffect beyond the basics.', date: '2024-09-10', hashtags: ['#code', '#react', '#tech'] },
    { id: 3, title: 'The Best Peach Pie Recipe', snippet: 'My secret ingredient for the perfect flaky crust.', date: '2024-09-05', hashtags: ['#food', '#recipe', '#peach'] },
    { id: 4, title: 'Travel: Road Trip Essentials', snippet: 'What I never leave home without on a long drive.', date: '2024-08-28', hashtags: ['#travel', '#life'] },
    { id: 5, title: 'A Short History of Typography', snippet: 'From Gutenberg to Google Fonts.', date: '2024-08-20', hashtags: ['#design', '#art'] },
  ];

  const mockAdminContent = {
    myPhotoUrl: "https://placehold.co/100x100/fecaca/991b1b?text=My+Photo", 
    topics: ['Creativity', 'Lifestyle', 'Tech', 'Food'], 
    thoughtForTheDay: { 
      text: "The best time to plant a tree was 20 years ago. The second best time is now.",
      source: "Chinese Proverb",
    },
    email: 'myemail@example.com',
    instagramHandle: '@mybloghandle',
    licensing: 'Â© 2024 Your Blog Name. All rights reserved.',
    carouselImages: [ 
      { id: 1, url: 'https://placehold.co/1200x300/FDBA74/9A3412?text=Carousel+Image+1+(Admin)', alt: 'Inspirational landscape' },
      { id: 2, url: 'https://placehold.co/1200x300/FEB2B2/7F1D1D?text=Carousel+Image+2+(Admin)', alt: 'Coding setup' },
    ]
  };

  const recentHashtags = Array.from(new Set(mockBlogs.flatMap(b => b.hashtags)))
    .slice(0, 13);

  return {
    blogs: mockBlogs.slice(0, 3), 
    hashtags: recentHashtags,
    admin: mockAdminContent
  };
};

// --- ICON COMPONENTS (Lucide equivalents for consistency) ---
const MenuIcon = (props) => (<svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="4" x2="20" y1="12" y2="12"/><line x1="4" x2="20" y1="6" y2="6"/><line x1="4" x2="20" y1="18" y2="18"/></svg>);
const InstagramIcon = (props) => (<svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="20" height="20" x="2" y="2" rx="5" ry="5"/><path d="M16 11.37A4 4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"/><line x1="17.5" x2="17.51" y1="6.5" y2="6.5"/></svg>);
const MailIcon = (props) => (<svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="20" height="16" x="2" y="4" rx="2"/><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"/></svg>);
const HashIcon = (props) => (<svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="4" x2="20" y1="9" y2="9"/><line x1="4" x2="20" y1="15" y2="15"/><line x1="10" x2="10" y1="3" y2="21"/><line x1="16" x2="16" y1="3" y2="21"/></svg>);
const UserIcon = (props) => (<svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>);
const ImageIcon = (props) => (<svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="18" height="18" x="3" y="3" rx="2"/><circle cx="8.5" cy="8.5" r="1.5"/><path d="m21 15-5.36-5.36a1 1 0 0 0-1.42 0L5 21"/></svg>);


// Ribbon Icons
const PaletteIcon = (props) => (<svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M17.5 10.5 10.5 17.5l-2.93 2.93a1 1 0 0 1-1.41-1.41l2.93-2.93 7-7z"/><path d="m14.23 6.46 3.32 3.32"/><path d="M12.92 7.85A2.12 2.12 0 0 1 11.4 6.33L10 4.91 19.09 14l-1.42 1.41a2.12 2.12 0 0 1-1.52.52L12.92 7.85z"/></svg>);
const FontSizeIcon = (props) => (<svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2.5 18h2.5V6H4.5V4h7v2h-1V18h2V6h-1V4h7v2h-1V18h2.5"/><line x1="12" x2="12" y1="21" y2="19"/></svg>);
const AlignLeftIcon = (props) => (<svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="21" x2="3" y1="6" y2="6"/><line x1="17" x2="3" y1="12" y2="12"/><line x1="19" x2="3" y1="18" y2="18"/></svg>);
const HighlighterIcon = (props) => (<svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m21.93 11.64-5.83-5.83c-1-1-2-1-3 0L3 16.5V21h4.5L16.5 9.43c1-1 1-2 0-3z"/></svg>);
const UploadIcon = (props) => (<svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="17 8 12 3 7 8"/><line x1="12" x2="12" y1="3" y2="15"/></svg>);

// New Icons for Font Styling
const BoldIcon = (props) => (<svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14 12H8V5H14C16.21 5 18 6.79 18 9C18 11.21 16.21 13 14 13Z"/><path d="M14 13H8V20H14C16.21 20 18 18.21 18 16C18 13.79 16.21 12 14 12Z"/></svg>);
const ItalicIcon = (props) => (<svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="19" x2="10" y1="4" y2="4"/><line x1="14" x2="5" y1="20" y2="20"/><line x1="15" x2="9" y1="4" y2="20"/></svg>);
const UnderlineIcon = (props) => (<svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"/><line x1="4" x2="20" y1="21" y2="21"/></svg>);
const TypeIcon = (props) => (<svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 7V4h16v3"/><path d="M9 20h6"/><path d="M12 4v16"/></svg>);


// --- EditableText Component for in-line editing (Feature 3) ---
const EditableText = ({ 
    tag: Tag = 'p', 
    initialValue, 
    onChange, 
    isEditable, 
    className, 
    onStartEditing = () => {}, 
    onStopEditing = () => {}   
}) => {
    const [text, setText] = useState(initialValue);
    const [isEditing, setIsEditing] = useState(false);
    const inputRef = useRef(null);

    // Sync external changes
    useEffect(() => {
        setText(initialValue);
    }, [initialValue]);

    // Focus input when editing starts
    useEffect(() => {
        if (isEditing && inputRef.current) {
            inputRef.current.focus();
        }
    }, [isEditing]);

    const handleKeyDown = (e) => {
        if (e.key === 'Enter') {
            handleBlur();
        }
    };
    
    const handleBlur = () => {
        setIsEditing(false);
        onChange(text);
        onStopEditing(); // Notify parent editing has stopped
    };

    const handleClick = () => {
        if (isEditable) {
            setIsEditing(true);
            onStartEditing(); // Notify parent editing has started
        }
    };


    if (isEditable && isEditing) {
        return (
            <input
                ref={inputRef}
                type="text"
                value={text}
                onChange={(e) => setText(e.target.value)}
                onBlur={handleBlur}
                onKeyDown={handleKeyDown}
                className={`w-full bg-transparent border-b-2 border-lime-400 p-1 outline-none ${className}`}
            />
        );
    }

    return (
        <Tag className={className} onClick={handleClick}>
            {text}
            {isEditable && <span className="ml-2 text-xs opacity-50 cursor-pointer select-none">&#9998;</span>}
        </Tag>
    );
};

// --- Commit Modal Component (Persistence) ---
const CommitModal = ({ isOpen, onClose, theme, editableState }) => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');

    if (!isOpen) return null;

    // Determine if we are in the dark theme to choose text color for the input fields
    const isDarkTheme = theme.mainBg.includes('bg-gray-900');

    const handleCommit = (e) => {
      e.preventDefault();
      setError('');

      // Simulated Authentication Logic (Commit formality)
      if (username === 'admin' && password === 'admin') {
        // Here, the editableState (hashtags, thoughts, carousel images, customFonts) would be saved to Firestore/DB.
        console.log('--- COMMIT ACTION LOG: SUCCESS ---');
        console.log('Editable Content to be Saved:', editableState);
        onClose(); // Close on success
      } else {
        setError('Invalid username or password. Please use "admin" for both.');
      }
    };

    return (
      <div className="fixed inset-0 z-50 flex items-center justify-center bg-gray-900/70 backdrop-blur-sm p-4">
        <div className={`w-full max-w-md p-6 rounded-xl shadow-2xl ${theme.sectionBg} border ${theme.borderColor} ${theme.darkText}`}>
          <h3 className="text-2xl font-bold mb-4">Commit Changes</h3>
          <p className={`${theme.subtleText} mb-6`}>Enter credentials to publish edits to the live site.</p>

          {error && (
            <div className="bg-red-900 text-white p-3 rounded-lg mb-4 text-sm">
              {error}
            </div>
          )}

          <form onSubmit={handleCommit} className="space-y-4">
            <div>
              <label htmlFor="username" className="block text-sm font-medium mb-1">Username</label>
              <input
                id="username"
                type="text"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                className={`w-full p-2 rounded-lg border ${theme.borderColor} ${theme.mainBg.split(' ')[0]} ${isDarkTheme ? 'text-lime-400' : 'text-gray-900'}`}
                required
              />
            </div>
            <div>
              <label htmlFor="password" className="block text-sm font-medium mb-1">Password</label>
              <input
                id="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className={`w-full p-2 rounded-lg border ${theme.borderColor} ${theme.mainBg.split(' ')[0]} ${isDarkTheme ? 'text-lime-400' : 'text-gray-900'}`}
                required
              />
            </div>
            
            <div className="flex justify-end space-x-3 pt-4">
              <button
                type="button"
                onClick={onClose}
                className="px-6 py-2 rounded-full font-semibold bg-red-600 text-white shadow-lg hover:bg-red-700 transition"
              >
                Cancel (Red)
              </button>
              <button
                type="submit"
                className="px-6 py-2 rounded-full font-semibold bg-lime-500 text-gray-900 shadow-lg hover:bg-lime-600 transition"
              >
                Commit (Green)
              </button>
            </div>
          </form>
        </div>
      </div>
    );
  };
  
// --- Carousel Manager Modal (Feature 1) ---
const CarouselManagerModal = ({ isOpen, onClose, images, theme, setImages }) => {
    if (!isOpen) return null;

    const handleSimulatedUpload = () => {
        // In a real app, this would trigger a file picker or a Google Drive selection
        const newId = images.length + 1;
        const newImage = {
            id: newId, 
            url: `https://placehold.co/1200x300/34D399/064E3B?text=New+Pic+${newId}`, 
            alt: `Uploaded Image ${newId} (Admin)`
        };
        setImages(prev => [...prev, newImage]);
        console.log(`Simulated: Added new image ${newId} to carousel state.`);
    };

    const handleRemoveImage = (id) => {
        setImages(prev => prev.filter(img => img.id !== id));
    };

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-gray-900/70 backdrop-blur-sm p-4">
            <div className={`w-full max-w-2xl p-6 rounded-xl shadow-2xl ${theme.sectionBg} border ${theme.borderColor} ${theme.darkText}`}>
                <h3 className="text-2xl font-bold mb-4">Manage Carousel Images</h3>
                
                <div className="space-y-3 max-h-80 overflow-y-auto pr-2 mb-4">
                    {images.map(image => (
                        <div key={image.id} className={`flex items-center justify-between p-3 rounded-lg ${theme.cardBg} border ${theme.borderColor}`}>
                            <div className="flex items-center space-x-3 w-4/5">
                                <img src={image.url} alt={image.alt} className="w-16 h-10 object-cover rounded-md" />
                                <span className="text-sm truncate">{image.alt.split('(')[0].trim()}</span>
                            </div>
                            <button
                                onClick={() => handleRemoveImage(image.id)}
                                className="p-1 bg-red-600 hover:bg-red-700 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold transition"
                                title="Remove Image"
                            >
                                &times;
                            </button>
                        </div>
                    ))}
                    {images.length === 0 && <p className="text-center italic text-sm text-gray-500">No images currently in the carousel.</p>}
                </div>
                
                <p className={`${theme.subtleText} text-sm mb-3 text-center`}>
                    Photos will be uploadable from your **Device** or **Google Drive**.
                </p>
                <button
                    onClick={handleSimulatedUpload}
                    className="w-full mb-4 px-4 py-3 rounded-full font-semibold bg-lime-500 text-gray-900 shadow-lg hover:bg-lime-600 transition flex items-center justify-center space-x-2"
                >
                    <UploadIcon className="w-5 h-5" />
                    <span>Upload Pictures from Device / Drive (Simulated)</span>
                </button>

                <div className="flex justify-end">
                    <button
                        onClick={onClose}
                        className={`px-6 py-2 rounded-full font-semibold ${theme.accentBtn} transition`}
                    >
                        Done
                    </button>
                </div>
            </div>
        </div>
    );
};


// --- MAIN APPLICATION COMPONENT ---
export default function App() {
  const mockData = useMockData();
  
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);
  const [isDarkTheme, setIsDarkTheme] = useState(false);
  // STATE: Controls the visibility of the editing ribbon (Active editing state)
  const [isContentEditorActive, setIsContentEditorActive] = useState(false); 
  const [isCommitModalOpen, setIsCommitModalOpen] = useState(false);
  const [isCarouselModalOpen, setIsCarouselModalOpen] = useState(false); 
  
  // State for editable content (Features 1, 2, 3)
  const [editableHashtags, setEditableHashtags] = useState(mockData.hashtags);
  const [editableThought, setEditableThought] = useState(mockData.admin.thoughtForTheDay);
  const [editableCarouselImages, setEditableCarouselImages] = useState(mockData.admin.carouselImages);
  
  // State for custom fonts (OTF/TTF simulation)
  const [customFonts, setCustomFonts] = useState(['Inter', 'Roboto', 'Open Sans']);
  
  const blogs = mockData.blogs;
  const admin = {
      ...mockData.admin,
      hashtags: editableHashtags,
      thoughtForTheDay: editableThought,
      carouselImages: editableCarouselImages,
  };
  
  const [currentCarouselIndex, setCurrentCarouselIndex] = useState(0);

  // Define theme colors conditionally
  const theme = isDarkTheme ? {
    // Dark Theme (Black/Green)
    mainBg: 'bg-gray-900 text-gray-50',
    sectionBg: 'bg-gray-800',
    cardBg: 'bg-gray-700',
    accentBtn: 'bg-lime-400 text-gray-900 hover:bg-lime-500 shadow-lg',
    accentText: 'text-lime-400',
    darkText: 'text-gray-50',
    subtleText: 'text-gray-400',
    borderColor: 'border-lime-700/50',
    headerBg: 'bg-gray-900 shadow-lime-900/50',
    shadow: 'shadow-lg',
  } : {
    // Light Theme (Peach/Orange/Grey)
    mainBg: 'bg-amber-50 text-gray-900',
    sectionBg: 'bg-gray-100',
    cardBg: 'bg-amber-50',
    accentBtn: 'bg-orange-400 text-orange-900 hover:bg-orange-500 shadow-md',
    accentText: 'text-orange-600',
    darkText: 'text-gray-900',
    subtleText: 'text-gray-600',
    borderColor: 'border-gray-300',
    headerBg: 'bg-amber-50 shadow-sm',
    shadow: 'shadow-lg',
  };

  // Auto-advance carousel
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentCarouselIndex((prevIndex) =>
        (prevIndex + 1) % admin.carouselImages.length
      );
    }, 5000);
    return () => clearInterval(timer);
  }, [admin.carouselImages.length]);

  const toggleDrawer = useCallback(() => {
    setIsDrawerOpen(prev => !prev);
  }, []);
  
  const handleAboutMeClick = useCallback((event) => {
    // Shift+Click to toggle theme/admin mode
    if (event.shiftKey) {
        setIsDarkTheme(prev => !prev);
        // Deactivate content editor when switching themes
        setIsContentEditorActive(false); 
        event.preventDefault(); 
    }
  }, []);

  const handleFooterCommitClick = useCallback(() => {
    setIsCommitModalOpen(true);
  }, []);
  
  // Handler for removing a hashtag (Feature 2)
  const handleRemoveHashtag = useCallback((tagToRemove) => {
    if (!isDarkTheme) return; 
    setEditableHashtags(prev => prev.filter(tag => tag !== tagToRemove));
  }, [isDarkTheme]);
  
  // Handler for simulated font upload
  const handleSimulatedFontUpload = () => {
      const newFontName = customFonts.length % 2 === 0 ? 'Custom OTF Font' : 'Custom TTF Font';
      // Prevent duplicates in simulation
      if (!customFonts.includes(newFontName)) {
          setCustomFonts(prev => [...prev, newFontName]);
          console.log(`Simulated: Added new font ${newFontName} to customFonts state.`);
      } else {
           setCustomFonts(prev => [...prev, `${newFontName} ${prev.length + 1}`]);
           console.log(`Simulated: Added new font ${newFontName} ${customFonts.length + 1} to customFonts state.`);
      }
  };


  // Component for an individual blog post preview
  const RecentBlogCard = ({ blog }) => (
    <div className={`p-4 rounded-xl ${theme.shadow} transition duration-300 hover:shadow-xl ${theme.cardBg} cursor-pointer`}>
      <h3 className={`font-serif text-lg font-bold ${theme.darkText} mb-1`}>{blog.title}</h3>
      <p className={`text-sm ${theme.subtleText} line-clamp-2`}>{blog.snippet}</p>
      <div className="mt-2 flex flex-wrap gap-1">
        {blog.hashtags.slice(0, 2).map(tag => (
          <span key={tag} className={`text-xs font-medium ${isDarkTheme ? 'text-lime-600 bg-lime-900' : 'text-orange-600 bg-orange-100'} px-2 py-0.5 rounded-full`}>
            {tag}
          </span>
        ))}
      </div>
    </div>
  );
  
  // Editing Ribbon Component (Conditional on isContentEditorActive)
  const EditingRibbon = () => {
    const iconClass = `w-5 h-5 ${theme.darkText}`;
    const buttonClass = `p-2 rounded-lg transition hover:bg-opacity-70 ${theme.cardBg}`;

    return (
      <div className={`flex flex-wrap gap-2 p-3 rounded-xl shadow-xl mb-6 sticky top-[68px] z-20 ${theme.sectionBg} border ${theme.borderColor}`}>
        <span className={`text-sm font-semibold mr-4 self-center ${theme.darkText}`}>Content Editor:</span>
        
        {/* 1. Font Color */}
        <button className={buttonClass} title="Font Color">
          <PaletteIcon className={iconClass} style={{stroke: 'red'}} />
        </button>
        
        {/* 2. Font Size */}
        <button className={buttonClass} title="Font Size">
          <FontSizeIcon className={iconClass} />
        </button>
        
        {/* 3. Font Type (Dropdown) */}
        <div className={`relative ${buttonClass} group`}>
          <TypeIcon className={iconClass} />
          <div className="absolute top-full left-0 mt-1 w-40 p-2 bg-white text-gray-900 rounded-md shadow-lg hidden group-hover:block z-30 ring-1 ring-gray-200">
            <h4 className="text-xs font-bold mb-1 border-b pb-1">Select Font:</h4>
            {customFonts.map((font, index) => (
                <button 
                    key={index}
                    className="block w-full text-left text-sm py-1 px-2 rounded hover:bg-gray-100 transition"
                    style={{ fontFamily: font }} // Simulated visual effect
                >
                    {font}
                </button>
            ))}
          </div>
        </div>
        
        {/* 4. Bold */}
        <button className={buttonClass} title="Bold">
          <BoldIcon className={iconClass} />
        </button>

        {/* 5. Italics */}
        <button className={buttonClass} title="Italics">
          <ItalicIcon className={iconClass} />
        </button>
        
        {/* 6. Underline */}
        <button className={buttonClass} title="Underline">
          <UnderlineIcon className={iconClass} />
        </button>
        
        {/* 7. Alignment */}
        <button className={buttonClass} title="Alignment">
          <AlignLeftIcon className={iconClass} />
        </button>
        
        {/* 8. Highlight */}
        <button className={buttonClass} title="Highlight Color">
          <HighlighterIcon className={iconClass} />
        </button>
        
        {/* 9. Upload Font Files (OTF/TTF) */}
        <button 
            onClick={handleSimulatedFontUpload}
            className={`flex items-center space-x-1 px-3 ${buttonClass} hover:bg-lime-900`} 
            title="Upload OTF/TTF Files"
        >
          <UploadIcon className={iconClass} />
          <span className="text-xs">Font (.ttf/.otf)</span>
        </button>
        
      </div>
    );
  };


  return (
    <div className={`min-h-screen font-sans ${theme.mainBg} transition-colors duration-500`}>
      {/* 1. Drawer Menu (7) - Overlay */}
      <div
        className={`fixed inset-0 z-40 transform transition-all duration-300 ${
          isDrawerOpen ? 'translate-x-0' : '-translate-x-full'
        } bg-gray-900/90 backdrop-blur-sm`}
        onClick={toggleDrawer}
      >
        <div className={`w-64 h-full shadow-2xl p-6 ${theme.cardBg} overflow-y-auto`} onClick={(e) => e.stopPropagation()}>
          <h2 className={`text-2xl font-bold mb-6 border-b pb-2 ${theme.borderColor}`}>Menu (7)</h2>
          <nav className="space-y-4">
            {/* Drawer Menu Buttons */}
            <button className={`block w-full text-left p-3 rounded-lg ${theme.accentBtn}`}>Home</button>
            <button className={`block w-full text-left p-3 rounded-lg ${theme.sectionBg} shadow hover:opacity-80 transition ${theme.darkText}`}>
                Table of Contents
            </button>
            <button className={`block w-full text-left p-3 rounded-lg ${theme.sectionBg} shadow hover:opacity-80 transition ${theme.darkText}`}>
                About Me
            </button>
            <button className={`block w-full text-left p-3 rounded-lg ${theme.sectionBg} shadow hover:opacity-80 transition ${theme.darkText}`}>
                Gallery
            </button>
            <button className={`block w-full text-left p-3 rounded-lg ${theme.sectionBg} shadow hover:opacity-80 transition ${theme.darkText}`}>
                Feedback
            </button>
          </nav>
        </div>
      </div>

      {/* Main Content Area */}
      <div className="max-w-7xl mx-auto p-4 md:p-6 lg:p-8">
        {/* Top Most Section (Header) */}
        <header className={`flex justify-between items-center py-4 border-b ${theme.borderColor} mb-6 sticky top-0 z-30 ${theme.headerBg}`}>
          
          {/* LEFT SIDE: Menu Icon, Logo (1), and Topics (2, 3, 4, 5) */}
          <div className="flex items-center space-x-4">
            {/* Drawer Menu button (7) */}
            <button
              onClick={toggleDrawer}
              className={`p-2 rounded-full ${theme.shadow} ${theme.accentBtn}`}
              title="Open Menu"
            >
              <MenuIcon className="w-6 h-6" />
            </button>

            {/* 1. Logo/MyPhoto (Admin) */}
            <img
              src={admin.myPhotoUrl}
              alt="My Photo"
              className={`w-10 h-10 rounded-full object-cover border-2 ${isDarkTheme ? 'border-lime-400' : 'border-orange-400'} shadow-md`}
            />
            {/* 2, 3, 4, 5. Topic Buttons (Admin) */}
            <nav className="hidden md:flex space-x-3">
              {admin.topics.map((topic, index) => (
                <button
                  key={index}
                  className={`px-3 py-1 text-sm font-medium rounded-full transition duration-150 ${theme.accentBtn}`}
                >
                  {topic}
                </button>
              ))}
            </nav>
          </div>

          {/* RIGHT SIDE: Action Buttons (#, About Me, âï¸, ð·) */}
          <div className="flex items-center space-x-3">
            {/* Hashtags button (#) */}
            <button
              className={`p-2 rounded-full ${theme.shadow} ${theme.accentBtn}`}
              title="View All Hashtags"
            >
              <HashIcon className="w-5 h-5" />
            </button>
            
            {/* NEW: About Me button (Doll Icon) - With Shift+Click Theme Toggle */}
            <button
              onClick={handleAboutMeClick}
              className={`p-2 rounded-full ${theme.shadow} ${theme.accentBtn}`}
              title="About Me (Shift+Click for Admin Theme)"
            >
              <UserIcon className="w-5 h-5" />
            </button>

            {/* My Email ID button (âï¸) */}
            <a
              href={`mailto:${admin.email}`}
              className={`p-2 rounded-full ${theme.shadow} ${theme.accentBtn}`}
              target="_blank"
              rel="noopener noreferrer"
              title={`Email: ${admin.email}`}
            >
              <MailIcon className="w-5 h-5" />
            </a>

            {/* My Instagram button (ð·) */}
            <a
              href={`https://instagram.com/${admin.instagramHandle.replace('@', '')}`}
              className={`p-2 rounded-full ${theme.shadow} ${theme.accentBtn}`}
              target="_blank"
              rel="noopener noreferrer"
              title={`Instagram: ${admin.instagramHandle}`}
            >
              <InstagramIcon className="w-5 h-5" />
            </a>
          </div>
        </header>
        
        {/* EDITING RIBBON (Conditional on Active Editing) */}
        {isContentEditorActive && <EditingRibbon />}

        {/* 8. Picture Carousel Section (Admin) - Feature 1 implemented here */}
        <section 
            // Clickable to manage carousel images when in dark theme
            onClick={() => isDarkTheme && setIsCarouselModalOpen(true)}
            className={`relative w-full overflow-hidden rounded-xl shadow-2xl mb-8 border ${theme.borderColor} h-60 md:h-80 ${theme.sectionBg} ${isDarkTheme ? 'cursor-pointer group' : ''}`}
        >
          {admin.carouselImages.map((image, index) => (
            <div
              key={image.id}
              className={`absolute inset-0 transition-opacity duration-1000 ease-in-out ${
                index === currentCarouselIndex ? 'opacity-100' : 'opacity-0'
              }`}
            >
              <img
                src={image.url}
                alt={image.alt}
                className="w-full h-full object-cover"
              />
              <div className="absolute inset-0 bg-gray-900/30 flex items-center justify-center">
                <p className="text-3xl font-bold text-white drop-shadow-lg">
                  {image.alt.includes('(Admin)') ? image.alt.split('(')[0].trim() : image.alt}
                </p>
              </div>
            </div>
          ))}
          
          {/* Overlay Button for Admin Mode (Feature 1 Visual Cue) */}
          {isDarkTheme && (
            <div className="absolute inset-0 bg-black/40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition duration-300">
                <div className="p-4 bg-lime-500 text-gray-900 rounded-full flex items-center space-x-2 shadow-xl">
                    <ImageIcon className="w-6 h-6" />
                    <span className="font-bold">Click to Manage Carousel Images</span>
                </div>
            </div>
          )}
        </section>

        {/* 9. Display of Hashtags Buttons - Feature 2 implemented here */}
        <section className={`mb-8 p-4 rounded-xl ${theme.sectionBg} shadow-inner`}>
          <h2 className={`text-xl font-bold mb-3 ${theme.darkText}`}>Trending Topics</h2>
          <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-2">
            {admin.hashtags.map((tag, index) => (
              <div key={index} className="relative">
                <button
                  className={`p-2 text-sm font-semibold rounded-lg ${theme.cardBg} ${theme.subtleText} ${theme.shadow} hover:opacity-80 transition duration-150 w-full`}
                >
                  {tag}
                </button>
                {/* Remove button (Feature 2) */}
                {isDarkTheme && (
                    <button
                        onClick={() => handleRemoveHashtag(tag)}
                        className="absolute -top-1 -right-1 bg-red-600 hover:bg-red-700 text-white w-4 h-4 flex items-center justify-center rounded-full text-xs font-bold transition shadow-md"
                        title={`Remove ${tag}`}
                    >
                        &times;
                    </button>
                )}
              </div>
            ))}
          </div>
        </section>

        {/* Lower Section: 10 (Left) vs 11/12 (Right) */}
        <main className="grid grid-cols-1 md:grid-cols-3 gap-6">

          {/* Left Column: 10. Most Recent 3 Blogs Buttons (3 stacked boxes) */}
          <section className="md:col-span-1 space-y-4">
            <h2 className={`text-2xl font-bold ${theme.darkText}`}>Recent Posts (10)</h2>
            {blogs.map((blog) => (
              <RecentBlogCard key={blog.id} blog={blog} />
            ))}
            {/* Spacer/Placeholder to ensure layout consistency */}
            {blogs.length < 3 && <div className="h-48 bg-transparent"></div>}
          </section>

          {/* Right Column: 11 (Top) - Feature 3 implemented here */}
          <section className="md:col-span-2 space-y-6">

            {/* 11. Thought for the day section (Admin) */}
            <div className={`p-6 rounded-xl ${theme.shadow} ${theme.sectionBg} border-l-4 ${isDarkTheme ? 'border-lime-400' : 'border-orange-400'}`}>
              <h2 className={`text-2xl font-serif font-bold mb-2 ${isDarkTheme ? 'text-lime-400' : 'text-orange-800'}`}>Thought for the Day (11)</h2>
              <blockquote className={`italic text-xl ${theme.darkText} flex flex-col`}>
                <EditableText
                    tag="span"
                    initialValue={`â${admin.thoughtForTheDay.text}â`}
                    // Remove quotes before saving to state
                    onChange={(newText) => setEditableThought(prev => ({ ...prev, text: newText.replace(/â|â/g, '') }))}
                    isEditable={isDarkTheme}
                    onStartEditing={() => isDarkTheme && setIsContentEditorActive(true)} // ACTIVATE RIBBON
                    onStopEditing={() => isDarkTheme && setIsContentEditorActive(false)} // DEACTIVATE RIBBON
                    className="cursor-pointer mb-2"
                />
              </blockquote>
              <footer className={`text-right text-sm ${theme.subtleText} mt-2`}>
                â <EditableText
                    tag="span"
                    initialValue={admin.thoughtForTheDay.source}
                    onChange={(newSource) => setEditableThought(prev => ({ ...prev, source: newSource }))}
                    isEditable={isDarkTheme}
                    onStartEditing={() => isDarkTheme && setIsContentEditorActive(true)} // ACTIVATE RIBBON
                    onStopEditing={() => isDarkTheme && setIsContentEditorActive(false)} // DEACTIVATE RIBBON
                    className="inline-block cursor-pointer"
                />
              </footer>
            </div>

            {/* 12. Gallery Button/Section */}
            <div className={`p-6 rounded-xl ${theme.shadow} ${theme.cardBg} h-96 flex flex-col justify-center items-center border ${theme.borderColor}`}>
              <h2 className={`text-3xl font-bold mb-4 ${theme.darkText}`}>My Creative Gallery (12)</h2>
              <p className={`${theme.subtleText} mb-6 text-center`}>
                A showcase of my latest photography, art, or design work.
              </p>
              <button className={`text-lg px-8 py-3 rounded-full font-semibold ${theme.shadow} transition duration-300 ${theme.accentBtn}`}>
                View Full Gallery
              </button>
              <div className={`text-xs ${theme.subtleText} mt-4`}>(Content here is dynamically updated from your backend.)</div>
            </div>
          </section>

        </main>

        {/* 13. My licensing/copyright info - Footer */}
        <footer className={`mt-12 pt-4 border-t ${theme.borderColor} text-center`}>
          <p className={`text-xs ${theme.subtleText}`}>{admin.licensing} (13)</p>
          
          {/* FOOTER COMMIT BUTTON */}
          {isDarkTheme && (
            <div className="mt-4">
              <button 
                onClick={handleFooterCommitClick}
                className="px-8 py-3 rounded-full font-bold bg-lime-500 text-gray-900 shadow-xl hover:bg-lime-600 transition"
              >
                Commit Changes
              </button>
            </div>
          )}

        </footer>
      </div>
      
      {/* COMMIT MODAL CALL */}
      <CommitModal 
        isOpen={isCommitModalOpen} 
        onClose={() => setIsCommitModalOpen(false)} 
        theme={theme}
        editableState={{ editableHashtags, editableThought, editableCarouselImages, customFonts }}
      />
      
      {/* CAROUSEL MANAGER MODAL CALL (Feature 1) */}
      <CarouselManagerModal
          isOpen={isCarouselModalOpen}
          onClose={() => setIsCarouselModalOpen(false)}
          images={admin.carouselImages}
          setImages={setEditableCarouselImages}
          theme={theme}
      />
    </div>
  );
}
